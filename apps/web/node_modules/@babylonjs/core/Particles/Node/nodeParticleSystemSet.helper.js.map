{"version":3,"file":"nodeParticleSystemSet.helper.js","sourceRoot":"","sources":["../../../../../dev/core/src/Particles/Node/nodeParticleSystemSet.helper.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Nullable } from \"core/types\";\r\nimport type { ParticleSystem } from \"../particleSystem\";\r\nimport { NodeParticleSystemSet } from \"./nodeParticleSystemSet\";\r\nimport { SystemBlock } from \"./Blocks/systemBlock\";\r\nimport { CreateParticleBlock } from \"./Blocks/Emitters/createParticleBlock\";\r\nimport { BoxShapeBlock } from \"./Blocks/Emitters/boxShapeBlock\";\r\nimport type { IShapeBlock } from \"./Blocks/Emitters/IShapeBlock\";\r\nimport type { Vector3 } from \"core/Maths/math.vector\";\r\nimport type { NodeParticleConnectionPoint } from \"./nodeParticleBlockConnectionPoint\";\r\nimport type { BoxParticleEmitter } from \"../EmitterTypes/boxParticleEmitter\";\r\nimport type { PointParticleEmitter } from \"../EmitterTypes/pointParticleEmitter\";\r\nimport type { SphereParticleEmitter } from \"../EmitterTypes/sphereParticleEmitter\";\r\nimport type { CylinderParticleEmitter, MeshParticleEmitter } from \"../EmitterTypes\";\r\nimport type { Mesh } from \"core/Meshes/mesh\";\r\nimport { ParticleInputBlock } from \"./Blocks/particleInputBlock\";\r\nimport { PointShapeBlock } from \"./Blocks/Emitters/pointShapeBlock\";\r\nimport { SphereShapeBlock } from \"./Blocks/Emitters/sphereShapeBlock\";\r\nimport { CylinderShapeBlock } from \"./Blocks/Emitters/cylinderShapeBlock\";\r\nimport { MeshShapeBlock } from \"./Blocks/Emitters/meshShapeBlock\";\r\n\r\nfunction _CreateAndConnectInput(connectionPoint: NodeParticleConnectionPoint, name: string, defaultValue: Vector3 | number) {\r\n    const input = new ParticleInputBlock(name);\r\n    input.value = defaultValue;\r\n    input.output.connectTo(connectionPoint);\r\n}\r\n\r\n/**\r\n * Converts a ParticleSystem to a NodeParticleSystemSet.\r\n * @param name The name of the node particle system set.\r\n * @param particleSystems The particle systems to convert.\r\n * @returns The converted node particle system set or null if conversion failed.\r\n */\r\nexport function ConvertToNodeParticleSystemSet(name: string, particleSystems: ParticleSystem[]): Nullable<NodeParticleSystemSet> {\r\n    if (!particleSystems || !particleSystems.length) {\r\n        return null;\r\n    }\r\n\r\n    const nodeParticleSystemSet = new NodeParticleSystemSet(name);\r\n\r\n    for (const particleSystem of particleSystems) {\r\n        // Main system\r\n        const system = new SystemBlock(particleSystem.name);\r\n\r\n        // Create particle\r\n        const createParticleBlock = new CreateParticleBlock(\"Create particle\");\r\n\r\n        // Shape\r\n        let shapeBlock: Nullable<IShapeBlock> = null;\r\n        switch (particleSystem.particleEmitterType.getClassName()) {\r\n            case \"BoxParticleEmitter\": {\r\n                const source = particleSystem.particleEmitterType as BoxParticleEmitter;\r\n                shapeBlock = new BoxShapeBlock(\"Box shape\");\r\n\r\n                const target = shapeBlock as BoxShapeBlock;\r\n                _CreateAndConnectInput(target.direction1, \"Direction 1\", source.direction1);\r\n                _CreateAndConnectInput(target.direction2, \"Direction 2\", source.direction2);\r\n                _CreateAndConnectInput(target.minEmitBox, \"Min Emit Box\", source.minEmitBox);\r\n                _CreateAndConnectInput(target.maxEmitBox, \"Max Emit Box\", source.maxEmitBox);\r\n                break;\r\n            }\r\n            case \"PointParticleEmitter\": {\r\n                const source = particleSystem.particleEmitterType as PointParticleEmitter;\r\n                shapeBlock = new PointShapeBlock(\"Point shape\");\r\n\r\n                const target = shapeBlock as PointShapeBlock;\r\n                _CreateAndConnectInput(target.direction1, \"Direction 1\", source.direction1);\r\n                _CreateAndConnectInput(target.direction2, \"Direction 2\", source.direction2);\r\n                break;\r\n            }\r\n            case \"SphereParticleEmitter\": {\r\n                const source = particleSystem.particleEmitterType as SphereParticleEmitter;\r\n                shapeBlock = new SphereShapeBlock(\"Sphere shape\");\r\n\r\n                const target = shapeBlock as SphereShapeBlock;\r\n                _CreateAndConnectInput(target.radius, \"Radius\", source.radius);\r\n                _CreateAndConnectInput(target.radiusRange, \"Radius Range\", source.radiusRange);\r\n                _CreateAndConnectInput(target.directionRandomizer, \"Direction Randomizer\", source.directionRandomizer);\r\n                break;\r\n            }\r\n            case \"CylinderParticleEmitter\": {\r\n                const source = particleSystem.particleEmitterType as CylinderParticleEmitter;\r\n                shapeBlock = new CylinderShapeBlock(\"Cylinder shape\");\r\n\r\n                const target = shapeBlock as CylinderShapeBlock;\r\n                _CreateAndConnectInput(target.height, \"Height\", source.height);\r\n                _CreateAndConnectInput(target.radius, \"Radius\", source.radius);\r\n                _CreateAndConnectInput(target.radiusRange, \"Radius Range\", source.radiusRange);\r\n                _CreateAndConnectInput(target.directionRandomizer, \"Direction Randomizer\", source.directionRandomizer);\r\n                break;\r\n            }\r\n            case \"MeshParticleEmitter\": {\r\n                const source = particleSystem.particleEmitterType as MeshParticleEmitter;\r\n                shapeBlock = new MeshShapeBlock(\"Mesh shape\");\r\n\r\n                const target = shapeBlock as MeshShapeBlock;\r\n                _CreateAndConnectInput(target.direction1, \"Direction 1\", source.direction1);\r\n                _CreateAndConnectInput(target.direction2, \"Direction 2\", source.direction2);\r\n\r\n                target.mesh = source.mesh as Mesh;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!shapeBlock) {\r\n            throw new Error(`Unsupported particle emitter type: ${particleSystem.particleEmitterType.getClassName()}`);\r\n        }\r\n\r\n        createParticleBlock.particle.connectTo(shapeBlock.particle);\r\n        shapeBlock.output.connectTo(system.particle);\r\n\r\n        nodeParticleSystemSet.systemBlocks.push(system);\r\n    }\r\n\r\n    return nodeParticleSystemSet;\r\n}\r\n"]}